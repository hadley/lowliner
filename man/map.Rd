% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/map.R
\name{map}
\alias{map}
\alias{map_v}
\alias{walk}
\title{Apply a function to each element of a list.}
\usage{
map(.x, .f, ...)

map_v(.x, .f, ..., .type)

walk(.x, .f, ...)
}
\arguments{
\item{.x}{A list or vector.}

\item{.f}{A function, formula or string.

  If a function, it is used as is.

  If a formula, e.g. \code{~ x + 2}, it is converted to a function with
  a single argument, \code{x}, e.g. \code{function(x) x + 2}. This is less
  typing for very simple anonymous functions.

  If a string, e.g. \code{"y"}, it is converted to an extractor function,
  \code{function(x) x[["y"]]}.}

\item{...}{Additional arguments passed on to \code{.f}.}

\item{.type}{Specifies the type of result of \code{.f}, if known.
This will improve performance, and adds a test that output of \code{.f}
is the type that you expect.}
}
\value{
\code{map()} a list if \code{.x} is a list or a data frame
  if \code{.x} is a data frame; \code{map_v()} a vector;
  \code{walk()} (invisibly) the input \code{.x}.
}
\description{
\code{map()} returns the transformed input; \code{walk()} calls
\code{.f} for its side-effect and returns the original
input. \code{map()} returns a list or a data frame; \code{map_v()}
always returns an atomic vector (or dies trying).
}
\examples{
1:10 \%>\%
  map(rnorm, n = 10) \%>\%
  map(mean, .type = numeric(1))

# Or use an anonymous function
1:10 \%>\%
  map(function(x) rnorm(10, x))

# Or a formula
1:10 \%>\%
  map(~ rnorm(10, .))

# A more realistic example: split a data frame into pieces, fit a
# model to each piece, summarise and extract R^2
mtcars \%>\%
  split(.$cyl) \%>\%
  map(~ lm(mpg ~ wt, data = .)) \%>\%
  map(summary) \%>\%
  map_v("r.squared")

# map, map_v allow you to control the output type:
# * list
mtcars \%>\% map(sum)
# * vector
mtcars \%>\% map_v(sum)
}
\seealso{
\code{\link{map2}()} and \code{\link{map3}()} to map over multiple
  inputs simulatenously
}

