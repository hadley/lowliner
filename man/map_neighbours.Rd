% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/map-pairs.R
\name{map_neighbours}
\alias{every_neighbors}
\alias{every_neighbours}
\alias{map_neighbors}
\alias{map_neighbours}
\alias{probe_neighbors}
\alias{probe_neighbours}
\alias{some_neighbors}
\alias{some_neighbours}
\title{Apply a binary function sequentially on a list.}
\usage{
map_neighbours(.x, .f, ...)

probe_neighbours(.x, .p, ...)

every_neighbours(.x, .p, ...)

some_neighbours(.x, .p, ...)
}
\arguments{
\item{.x}{A list or vector.}

\item{.f}{A function of at least two arguments.}

\item{...}{Additional arguments passed on to \code{.f} or \code{.p}.}

\item{.p}{A predicate function of at least two arguments.}
}
\value{
A list for \code{map_neighbours()}, a logical vector for
\code{probe_neighbours()}, \code{TRUE} or \code{FALSE} for
\code{every_neighbours()} and \code{some_neighbours()}.
}
\description{
\code{map_neighbours()} applies \code{.f} to all sequential pairs
of the elements of \code{.x}.
}
\details{
\code{probe_neighbours()} is similar but applies a predicate
function \code{.p} and return a logical
vector. \code{every_neighbours()} checks that a predicate function
returns \code{TRUE} on all pairs. \code{some_neighbours()} checks
that at least one pair returns \code{TRUE}.
}
\examples{
# map_neighbours() is particularly useful to check that all
# elements of a list are identical:
l <- list(list("a"), list("b", "c"), list("a"), list("a"))
l \%>\% map_neighbours(identical) \%>\% map_call(all)
l[-2] \%>\% map_neighbours(identical) \%>\% map_call(all)

# Since identical() is a binary predicate function, you can also
# use probe_neighbours()
l \%>\% probe_neighbours(identical) \%>\% all()

# Even more succintly:
l \%>\% every_neighbours(identical)
}
\seealso{
\code{\link{map_pairs}()} and \code{\link{probe_pairs}()}.
}

