% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/chart.R
\name{map_along}
\alias{map_along}
\title{Map a function on a list along coordinates}
\usage{
map_along(.x, .route, .f, ...)
}
\arguments{
\item{.x}{A list or vector.}

\item{.route}{A list of indices used to subset \code{.x}; a
character or numeric vector; or a function that takes .x and returns
a sequence of indices, like \code{seq_window()}, \code{seq_pairs()}
or \code{seq_along()}.}

\item{.f}{A function that takes a list of length equal to the
cardinality of the coordinates in \code{.route}.}

\item{...}{Further arguments passed on to \code{.f}.}
}
\description{
\code{map_along()} applies a function that takes a list \code{.x}
on a subset of its elements according to a given route of
coordinates.
}
\details{
\code{map_along()} is like \code{chart()} but applies \code{.f}
directly instead of modifying it.
}
\examples{
# Although it is not efficient for this purpose, map_along() offers
# a simple way of computing a moving average (here with a window of
# size 5) by using seq_window(). Note that we need to stich mean()'s
# signature since map_along() can only act on functions that take a
# list as their main argument.
mtcars \%>\% map_along(.route = partial(seq_window, size = 5), stitch(mean))

# map_along() with seq_along() as routing function is equivalent to
# a normal mapping (except that it does not retain attributes)
out1 <- mtcars \%>\% `attributes<-`(NULL) \%>\% map(mean)
out2 <- mtcars \%>\% map_along(seq_along, mean)
identical(out1, out2)

# seq_pairs() can be used to apply a function on all pairs of elements
# of .x (or a relevant subset of those pairs)
letters[1:4] \%>\% map_along(partial(seq_pairs, filter = `>`), identical)
}
\seealso{
\code{\link{chart}()}, \link{sequences}
}

