% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/coercion.R
\name{simplify}
\alias{simplify}
\alias{simplify_all}
\alias{as_vector}
\title{Simplify to a vector}
\usage{
simplify(.x, .type = NULL)

simplify_all(.x, .type = NULL)

as_vector(.x, .type = NULL)
}
\arguments{
\item{.x}{An atomic vector or a list of vectors. Atomic vectors are
returned as is. Lists are simplified into an atomic vector if
possible.}

\item{.type}{For \code{as_vector()}, an optional vector prototype of
\link[=vec_size]{size} 0, e.g. \code{integer(0)}. An error is thrown when
\code{.type} is supplied and \code{.x} can't be simplified (for example
because it is a list containing vectors with sizes different than
1, or vectors incompatible with \code{.type}).

\ifelse{html}{\figure{lifecycle-soft-deprecated.svg}{options: alt='Soft-deprecated lifecycle'}}{\strong{Soft-deprecated}} For \code{simplify()}, this
argument is now deprecated. For \code{as_vector()}, \code{.type} previously
could be a string describing a type as returned by \code{typeof()}, or
a vector of length > 0 to signal the expected length of each
element. These behaviours are now deprecated.}
}
\description{
\itemize{
\item \code{simplify()} tries to transform inputs into atomic vectors. If
the input is already an atomic vector, it is returned as is.  If
the input is a list containing atomic vectors of size 1 and whose
types are \link[=faq-compatibility-types]{compatible}, the
elements of the lists are assembled into the corresponding atomic
vector.
\item Whereas \code{simplify()} never fails, \code{as_vector()} is strict. It
throws an error if it can't convert the list to an atomic vector.
}
}
\examples{
# Simplify the contents of the list into a vector
list(1, 2, FALSE) \%>\% simplify()

# If the input is already a vector it is returned as is:
1:3 \%>\% simplify()

# If the list can't be simplified it is returned as is. This is the
# case when not all ements are size 1:
list(1:10, 2, FALSE) \%>\% simplify()

# Or because their types is not compatible:
list(1, 2, "foo") \%>\% simplify()

# `as_vector()` throws an error in these cases:
try(
  list(1:10, 2, FALSE) \%>\% as_vector()
)
}
