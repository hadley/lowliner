% Generated by roxygen2 (4.0.2): do not edit by hand
\name{cons}
\alias{\%..\%}
\alias{\%.:\%}
\alias{\%:.\%}
\alias{\%::\%}
\alias{\%:\%}
\alias{cons}
\title{Cons operators}
\usage{
lhs \%:\% rhs

lhs \%::\% rhs

lhs \%.:\% rhs

lhs \%:.\% rhs

lhs \%..\% rhs
}
\description{
The cons operators construct lists from a lhs and a rhs.
\code{\%:\%} wraps its arguments in a list automatically, while
\code{\%::\%}, \code{\%.:\%}, \code{\%:.\%} and \code{\%..\%} allow
for fine-grained control of which argument is wrapped and which is
left as is.
}
\details{
\enumerate{
  \item \code{\%:\%} wraps its non-list arguments in a list. Only
        non-object lists are considered as lists by \code{\%:\%}.
        Thus, a data.frame is a non-list argument and will get
        wrapped in a list before concatenation.
  \item \code{\%::\%} wraps both its arguments in a list.
  \item \code{\%.:\%} wraps only its right hand side in a list.
  \item \code{\%:.\%} wraps only its left hand side in a list.
  \item \code{\%..\%} does not wrap any argument in a list.
        \code{a \%..\% b} is equivalent to \code{c(a, b)} and
        can also be used to create non-list vectors.
}
}
\examples{
1:3 \%:\% 4

# Create a list of fitted models. `lm` objects are lists but have
# a class attribute. Thus `\%:\%` encloses them in a list before binding
# them.
fits <-
  lm(mpg ~ cyl, mtcars) \%:\%
  lm(disp ~ cyl, mtcars)

# Here, `\%:\%` only wraps the right hand side.
coefs <- fits \%:\%
  lm(hp ~ cyl, mtcars) \%>\%
  map(coef)
}

